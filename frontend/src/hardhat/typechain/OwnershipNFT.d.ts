/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface OwnershipNFTInterface extends ethers.utils.Interface {
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "authorOf(uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseURIextended()": FunctionFragment;
    "contentOf(uint256)": FunctionFragment;
    "contentURI(uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "hasOwnership(address,uint256)": FunctionFragment;
    "hashOf(uint256)": FunctionFragment;
    "ipfsPathOf(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "lend(uint256,address)": FunctionFragment;
    "mint(uint256,address)": FunctionFragment;
    "name()": FunctionFragment;
    "nextContentId()": FunctionFragment;
    "nextTokenId()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "priceOf(uint256)": FunctionFragment;
    "register(uint256,uint256,address,string,string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "royaltyInfo(uint256,uint256)": FunctionFragment;
    "royaltyOf(uint256)": FunctionFragment;
    "royaltyReceiverOf(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setContentHash(uint256,string)": FunctionFragment;
    "setIpfsPath(uint256,string)": FunctionFragment;
    "setPrice(uint256,uint256)": FunctionFragment;
    "setRoyalty(uint256,uint256,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "baseURIextended",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contentOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contentURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasOwnership",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ipfsPathOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lend",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextContentId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priceOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [BigNumberish, BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyReceiverOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setContentHash",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIpfsPath",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyalty",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authorOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseURIextended",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contentOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contentURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ipfsPathOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextContentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "royaltyOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "royaltyReceiverOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContentHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIpfsPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRoyalty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Register(address,uint256)": EventFragment;
    "SetContentHash(uint256,string)": EventFragment;
    "SetIpfsPath(uint256,string)": EventFragment;
    "SetPrice(uint256,uint256)": EventFragment;
    "SetRoyalty(uint256,uint256,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Register"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetContentHash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetIpfsPath"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRoyalty"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class OwnershipNFT extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: OwnershipNFTInterface;

  functions: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    authorOf(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "authorOf(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    baseURIextended(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "baseURIextended()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    contentOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "contentOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    contentURI(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "contentURI(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    hasOwnership(
      account: string,
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasOwnership(address,uint256)"(
      account: string,
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    hashOf(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "hashOf(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    ipfsPathOf(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ipfsPathOf(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    lend(
      tokenId: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "lend(uint256,address)"(
      tokenId: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mint(
      contentId: BigNumberish,
      to: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "mint(uint256,address)"(
      contentId: BigNumberish,
      to: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    name(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "name()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    nextContentId(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "nextContentId()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    nextTokenId(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "nextTokenId()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    priceOf(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "priceOf(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "register(uint256,uint256,address,string,string)"(
      price: BigNumberish,
      royalty: BigNumberish,
      royaltyReceiver: string,
      hash: string,
      path: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "register(uint256,uint256)"(
      price: BigNumberish,
      royalty: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    royaltyInfo(
      tokenId: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      receiver: string;
      royaltyAmount: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    "royaltyInfo(uint256,uint256)"(
      tokenId: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      receiver: string;
      royaltyAmount: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    royaltyOf(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "royaltyOf(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    royaltyReceiverOf(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "royaltyReceiverOf(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBaseURI(
      baseURI_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBaseURI(string)"(
      baseURI_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setContentHash(
      contentId: BigNumberish,
      hash: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setContentHash(uint256,string)"(
      contentId: BigNumberish,
      hash: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setIpfsPath(
      contentId: BigNumberish,
      path: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setIpfsPath(uint256,string)"(
      contentId: BigNumberish,
      path: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPrice(
      contentId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPrice(uint256,uint256)"(
      contentId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRoyalty(
      contentId: BigNumberish,
      royalty: BigNumberish,
      receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRoyalty(uint256,uint256,address)"(
      contentId: BigNumberish,
      royalty: BigNumberish,
      receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    symbol(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "symbol()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  authorOf(contentId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "authorOf(uint256)"(
    contentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseURIextended(overrides?: CallOverrides): Promise<string>;

  "baseURIextended()"(overrides?: CallOverrides): Promise<string>;

  contentOf(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "contentOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  contentURI(
    contentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "contentURI(uint256)"(
    contentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getApproved(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  hasOwnership(
    account: string,
    contentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasOwnership(address,uint256)"(
    account: string,
    contentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hashOf(contentId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "hashOf(uint256)"(
    contentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  ipfsPathOf(
    contentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "ipfsPathOf(uint256)"(
    contentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lend(
    tokenId: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "lend(uint256,address)"(
    tokenId: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mint(
    contentId: BigNumberish,
    to: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "mint(uint256,address)"(
    contentId: BigNumberish,
    to: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nextContentId(overrides?: CallOverrides): Promise<BigNumber>;

  "nextContentId()"(overrides?: CallOverrides): Promise<BigNumber>;

  nextTokenId(overrides?: CallOverrides): Promise<BigNumber>;

  "nextTokenId()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ownerOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  priceOf(
    contentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "priceOf(uint256)"(
    contentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "register(uint256,uint256,address,string,string)"(
    price: BigNumberish,
    royalty: BigNumberish,
    royaltyReceiver: string,
    hash: string,
    path: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "register(uint256,uint256)"(
    price: BigNumberish,
    royalty: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  royaltyInfo(
    tokenId: BigNumberish,
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    receiver: string;
    royaltyAmount: BigNumber;
    0: string;
    1: BigNumber;
  }>;

  "royaltyInfo(uint256,uint256)"(
    tokenId: BigNumberish,
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    receiver: string;
    royaltyAmount: BigNumber;
    0: string;
    1: BigNumber;
  }>;

  royaltyOf(
    contentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "royaltyOf(uint256)"(
    contentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  royaltyReceiverOf(
    contentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "royaltyReceiverOf(uint256)"(
    contentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBaseURI(
    baseURI_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBaseURI(string)"(
    baseURI_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setContentHash(
    contentId: BigNumberish,
    hash: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setContentHash(uint256,string)"(
    contentId: BigNumberish,
    hash: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setIpfsPath(
    contentId: BigNumberish,
    path: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setIpfsPath(uint256,string)"(
    contentId: BigNumberish,
    path: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPrice(
    contentId: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPrice(uint256,uint256)"(
    contentId: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRoyalty(
    contentId: BigNumberish,
    royalty: BigNumberish,
    receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRoyalty(uint256,uint256,address)"(
    contentId: BigNumberish,
    royalty: BigNumberish,
    receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenURI(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    authorOf(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "authorOf(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURIextended(overrides?: CallOverrides): Promise<string>;

    "baseURIextended()"(overrides?: CallOverrides): Promise<string>;

    contentOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "contentOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contentURI(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "contentURI(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    hasOwnership(
      account: string,
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasOwnership(address,uint256)"(
      account: string,
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hashOf(contentId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "hashOf(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    ipfsPathOf(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "ipfsPathOf(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lend(
      tokenId: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "lend(uint256,address)"(
      tokenId: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      contentId: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(uint256,address)"(
      contentId: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nextContentId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextContentId()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextTokenId()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    priceOf(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceOf(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "register(uint256,uint256,address,string,string)"(
      price: BigNumberish,
      royalty: BigNumberish,
      royaltyReceiver: string,
      hash: string,
      path: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "register(uint256,uint256)"(
      price: BigNumberish,
      royalty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    royaltyInfo(
      tokenId: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      receiver: string;
      royaltyAmount: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    "royaltyInfo(uint256,uint256)"(
      tokenId: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      receiver: string;
      royaltyAmount: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    royaltyOf(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "royaltyOf(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    royaltyReceiverOf(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "royaltyReceiverOf(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(baseURI_: string, overrides?: CallOverrides): Promise<void>;

    "setBaseURI(string)"(
      baseURI_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setContentHash(
      contentId: BigNumberish,
      hash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setContentHash(uint256,string)"(
      contentId: BigNumberish,
      hash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setIpfsPath(
      contentId: BigNumberish,
      path: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setIpfsPath(uint256,string)"(
      contentId: BigNumberish,
      path: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrice(
      contentId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPrice(uint256,uint256)"(
      contentId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyalty(
      contentId: BigNumberish,
      royalty: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRoyalty(uint256,uint256,address)"(
      contentId: BigNumberish,
      royalty: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Register(
      author: string | null,
      contentId: BigNumberish | null
    ): EventFilter;

    SetContentHash(contentId: BigNumberish | null, hash: null): EventFilter;

    SetIpfsPath(contentId: BigNumberish | null, path: null): EventFilter;

    SetPrice(contentId: BigNumberish | null, price: null): EventFilter;

    SetRoyalty(
      contentId: BigNumberish | null,
      royalty: null,
      receiver: null
    ): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;
  };

  estimateGas: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    authorOf(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "authorOf(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURIextended(overrides?: CallOverrides): Promise<BigNumber>;

    "baseURIextended()"(overrides?: CallOverrides): Promise<BigNumber>;

    contentOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "contentOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contentURI(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "contentURI(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasOwnership(
      account: string,
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasOwnership(address,uint256)"(
      account: string,
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashOf(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hashOf(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ipfsPathOf(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ipfsPathOf(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lend(
      tokenId: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "lend(uint256,address)"(
      tokenId: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mint(
      contentId: BigNumberish,
      to: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "mint(uint256,address)"(
      contentId: BigNumberish,
      to: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextContentId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextContentId()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextTokenId()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceOf(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceOf(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "register(uint256,uint256,address,string,string)"(
      price: BigNumberish,
      royalty: BigNumberish,
      royaltyReceiver: string,
      hash: string,
      path: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "register(uint256,uint256)"(
      price: BigNumberish,
      royalty: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    royaltyInfo(
      tokenId: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "royaltyInfo(uint256,uint256)"(
      tokenId: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    royaltyOf(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "royaltyOf(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    royaltyReceiverOf(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "royaltyReceiverOf(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBaseURI(baseURI_: string, overrides?: Overrides): Promise<BigNumber>;

    "setBaseURI(string)"(
      baseURI_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setContentHash(
      contentId: BigNumberish,
      hash: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setContentHash(uint256,string)"(
      contentId: BigNumberish,
      hash: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setIpfsPath(
      contentId: BigNumberish,
      path: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setIpfsPath(uint256,string)"(
      contentId: BigNumberish,
      path: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPrice(
      contentId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPrice(uint256,uint256)"(
      contentId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRoyalty(
      contentId: BigNumberish,
      royalty: BigNumberish,
      receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRoyalty(uint256,uint256,address)"(
      contentId: BigNumberish,
      royalty: BigNumberish,
      receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    authorOf(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "authorOf(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURIextended(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseURIextended()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contentOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "contentOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contentURI(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "contentURI(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasOwnership(
      account: string,
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasOwnership(address,uint256)"(
      account: string,
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashOf(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hashOf(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ipfsPathOf(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ipfsPathOf(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lend(
      tokenId: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "lend(uint256,address)"(
      tokenId: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mint(
      contentId: BigNumberish,
      to: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "mint(uint256,address)"(
      contentId: BigNumberish,
      to: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextContentId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextContentId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextTokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextTokenId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceOf(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceOf(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "register(uint256,uint256,address,string,string)"(
      price: BigNumberish,
      royalty: BigNumberish,
      royaltyReceiver: string,
      hash: string,
      path: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "register(uint256,uint256)"(
      price: BigNumberish,
      royalty: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    royaltyInfo(
      tokenId: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "royaltyInfo(uint256,uint256)"(
      tokenId: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    royaltyOf(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "royaltyOf(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    royaltyReceiverOf(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "royaltyReceiverOf(uint256)"(
      contentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      baseURI_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBaseURI(string)"(
      baseURI_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setContentHash(
      contentId: BigNumberish,
      hash: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setContentHash(uint256,string)"(
      contentId: BigNumberish,
      hash: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setIpfsPath(
      contentId: BigNumberish,
      path: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setIpfsPath(uint256,string)"(
      contentId: BigNumberish,
      path: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPrice(
      contentId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPrice(uint256,uint256)"(
      contentId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRoyalty(
      contentId: BigNumberish,
      royalty: BigNumberish,
      receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRoyalty(uint256,uint256,address)"(
      contentId: BigNumberish,
      royalty: BigNumberish,
      receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
